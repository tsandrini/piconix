// =====================================================================
// 1. Whitespace & Source
// =====================================================================
COMMENT    = _{ "#" ~ (!NEWLINE ~ ANY)* }
WHITESPACE = _{ " " | "\t" | NEWLINE }
source = { SOI ~ WHITESPACE* ~ nix_expression ~ WHITESPACE* ~ EOI }

// =====================================================================
// 2. Keywords
// =====================================================================
keywords = _{ "rec" | "inherit" | "true" | "false" | "null" | "let" | "in" | "with" | "!" }

// =====================================================================
// 3. Expressions (Hierarchical)
// =====================================================================
nix_expression = { let_in_expr | with_expr | op_expr }

let_in_expr  = { "let" ~ attr_binding+ ~ "in" ~ nix_expression }
with_expr    = { "with" ~ nix_expression ~ ";" ~ nix_expression }
//op_expr      = { (prefix_op | atomic_expr) ~ (infix_op ~ (prefix_op | atomic_expr))* }
op_expr      = { term ~ (infix_op ~ term)* }
term         = { prefix_op* ~ atomic_expr }

atomic_expr = {
    literal |
    attrset |
    list |
    path_types |
    identifier |
    "(" ~ nix_expression ~ ")"
}

// -- Operator Groups and Tokens --
prefix_op = { arith_neg | logic_neg }
infix_op  = { add | sub }

// Specific operator token definitions
add = { "+" }
sub = { "-" }
arith_neg = { "-" }
logic_neg = { "!" }

// =====================================================================
// 4. Building Blocks & Literals
// =====================================================================
identifier_simple = @{
    !(keywords ~ !(ASCII_ALPHANUMERIC | "_" | "-")) ~
    (ASCII_ALPHA | "_") ~
    (ASCII_ALPHANUMERIC | "_" | "-")*
}
identifier_part   = { identifier_simple | string }
identifier        = @{ identifier_part ~ ("." ~ identifier_part)* }

// -- Literals --
literal = { string | float | integer | boolean | null }
integer = @{ ASCII_DIGIT+ }
float   = @{ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }
boolean = @{ "true" | "false" }
null    = @{ "null" }

// -- Paths --
path_types  = { search_path | path }
search_path = { "<" ~ identifier_simple ~ ">" }
path = @{
    ( "~/" | "../" | "./" | "/" ) ~ ( ( !( WHITESPACE | ";" ) ~ ANY )* ) |
    identifier_simple ~ ( "/" ~ ( !( WHITESPACE | ";" ) ~ ANY )* )+
}

// -- Collections and Bindings --
list            = { "[" ~ nix_expression* ~ "]" }
rec             = { "rec" }
attr_binding    = { binding | inherit_binding }
attrset         = { rec? ~ "{" ~ attr_binding* ~ "}" }
binding         = { identifier ~ "=" ~ nix_expression ~ ";" }
inherit_binding = { "inherit" ~ ("(" ~ identifier ~ ")")? ~ identifier_simple+ ~ ";" }

// -- Strings and interpolations --
string                = { "\"" ~ string_content* ~ "\"" }
interpolation         = { "${" ~ nix_expression ~ "}" }
escaped_quote         = @{ "\\" ~ "\"" }
escaped_interpolation = @{ "''${" }
string_literal_part   = @{ ( !("\"" | "$" | "\\" | "'") ~ ANY )+ }
dollar_literal        = @{ "$" ~ !("{") }
single_quote_literal  = @{ "'" ~ !"'" }
string_content = {
    escaped_quote |
    escaped_interpolation |
    interpolation |
    string_literal_part |
    dollar_literal |
    single_quote_literal
}
